<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Betta Coding]]></title>
  <link href="http://cristianobetta.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://cristianobetta.com/"/>
  <updated>2012-05-08T16:46:56+01:00</updated>
  <id>http://cristianobetta.com/</id>
  <author>
    <name><![CDATA[Cristiano Betta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tech on my radar]]></title>
    <link href="http://cristianobetta.com/blog/2012/04/19/tech-on-my-radar/"/>
    <updated>2012-04-19T23:19:00+01:00</updated>
    <id>http://cristianobetta.com/blog/2012/04/19/tech-on-my-radar</id>
    <content type="html"><![CDATA[<p>Here are just some interesting gems and other software that have caught my attention recently:</p>

<ul>
<li><a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> makes it easy to use zshell as a replacement for bash on OS X. It is very easy to install and comes with a whole bunch of useful plugins. I've only really dived half into it but already feel like it's been making my console better. I personally love how it shows the Git branch I'm working on at the moment.</li>
<li><a href="http://en.wikipedia.org/wiki/Bloom_filter">Bloom Filters</a> are a very cool way of doing a quick and space efficient lookup if an item exists in a set. It's used by databases and caches, and Google uses it for their Save Browsing service. There's some cool <a href="https://github.com/igrigorik/bloomfilter-rb">ruby gems</a> that make it easy to use them and I already have an idea where to deploy them next.</li>
<li><a href="http://zachholman.com/talk/how-github-uses-github-to-build-github">How Github uses Github</a> is pretty much how we use Github at EmberAds. The more we do it the more I see the benefits especially:

<ul>
<li>We work asynchronously</li>
<li>We use the hell out of Campfire</li>
<li>Master is always deployable</li>
<li>Pull Requests are our code reviews, requests for comments, and discussion boards.</li>
<li>Other apps have great features like prioritising stuff. But honestly, we have barely touched BaseCamp in weeks.</li>
</ul>
</li>
<li><a href="https://github.com/EmberAds/cuuid">Fast UUID generation</a> is something we needed at EmberAds seeing as we use UUIDs everywhere and most of the Ruby gems were rather slow.    <a href="http://caius.name">Caius</a> cooked up a Ruby gem that uses a native C library which in our simple benchmarks spit out UUIDs about 6x faster.</li>
<li>On that note, <a href="https://github.com/EmberAds/acts_as_uuid">acts_as_uuid</a> is what we use to store UUIDs on our models in Postgres.</li>
<li><a href="https://github.com/ondrejbartas/rake-progressbar">Rake progressbar</a> makes it easier for me to understand if I can go and make a brew or not when some of my rake tasks are running.</li>
<li>And finally, static site generators like <a href="http://nanoc.stoneship.org/">Nanoc</a>, <a href="https://github.com/mojombo/jekyll">Jekyll</a>, and <a href="http://octopress.org/">Octopress</a> (used on this site) have been really catching my eye lately. Mainly because of the security and scaling implications. I've been working on a blog post on this, mainly to inspire regular bloggers that you don't need a big server and a massive database to render a Wordpress site that will load slow as hell regardless.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add terms & conditions validation to Omniauth Identity]]></title>
    <link href="http://cristianobetta.com/blog/2012/04/12/add-terms-and-conditions-validation-to-omniauth-identity/"/>
    <updated>2012-04-12T00:32:00+01:00</updated>
    <id>http://cristianobetta.com/blog/2012/04/12/add-terms-and-conditions-validation-to-omniauth-identity</id>
    <content type="html"><![CDATA[<div class="entry-content"><p><a href="https://github.com/intridea/omniauth-identity">Omniauth Identity</a> is a great identity provide that shipped with Omniauth 1.0 it can be a bit simple at times. I wanted to add a simple terms and conditions check on signup to my registration form and this is what I came up with.</p>

<p>For this example I assume you already have a Omniauth Identity setup much like explained in <a href="http://railscasts.com/episodes/304-omniauth-identity">this Railscast</a>.</p>

<h2>Step 1 - app/models/identity.rb</h2>

<p>Add a checkbox to your form.</p>

<div><script src='https://gist.github.com/2368233.js?file='></script>
<noscript><pre><code>&lt;div class=&quot;field&quot;&gt;
  &lt;%= label_tag :conditions %&gt;&lt;br&gt;
  &lt;%= check_box_tag :conditions %&gt;
&lt;/div&gt;</code></pre></noscript></div>


<h2>Step 2 - app/views/identities/new.html.erb</h2>

<p>Add a attribute to your identity model and check for it to be set.</p>

<div><script src='https://gist.github.com/2368263.js?file='></script>
<noscript><pre><code>class Identity &lt; OmniAuth::Identity::Models::ActiveRecord

  ...

  validates :conditions, acceptance: true, allow_nil: false, on: :create
  attr_accessor :conditions

  ...

end</code></pre></noscript></div>


<p>You should really only check this on create, otherwise this validation will run every time the identity gets updated, unless of course you decide to store the <code>conditions</code> value in the database.</p>

<h2>Step 3 - config/initializers/omniauth.rb</h2>

<p>This is the one that took me the longest to figure out. You need to tell Omniauth Identity what fields to look for on signup.</p>

<div><script src='https://gist.github.com/2368322.js?file='></script>
<noscript><pre><code>Rails.application.config.middleware.use OmniAuth::Builder do
  provider :identity, fields: [:email, :conditions]
end</code></pre></noscript></div>


<p>In the same way you can add a user&#8217;s name and other details, though I highly recommend you don&#8217;t store those on the <code>Identity</code> but on the <code>User</code> model.</p>
</div>

]]></content>
  </entry>
  
</feed>
